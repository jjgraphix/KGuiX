<Application x:Class="KGuiX.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:sys="clr-namespace:System;assembly=System.Runtime"
             xmlns:local="clr-namespace:KGuiX"
             xmlns:converters="clr-namespace:KGuiX.Helpers.ValueConverters"
             Startup="App_OnStartup">

    <Application.Resources>
        <ResourceDictionary>
            <!-- Default Theme -->
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Themes/Dark.xaml" />
                <!-- <ResourceDictionary Source="/Themes/Light.xaml" /> -->
            </ResourceDictionary.MergedDictionaries>

            <converters:IsGreaterThanConverter x:Key="IsGreaterThanConverter"/>
            <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>

            <!-- Fonts -->
            <FontFamily x:Key="MaterialIcons">/Fonts/#Material Icons</FontFamily>

            <!-- Universal Brushes -->
            <SolidColorBrush x:Key="HighlightBrush" Color="#A9D9C4" />
            <SolidColorBrush x:Key="ScrollBarThumbBrush" Color="#4B7362" Opacity="0.6" />
            
            <SolidColorBrush x:Key="TitleBarCloseBrush" Color="#E60C23" />
            <SolidColorBrush x:Key="TitleBarButtonBrush" Color="#808080" Opacity="0.5" />


            <!--      XAML Templates - JJFX 2023      -->

            <!-- Title Bar Button Template -->
            <!-- Tag: As double for initial highlight opacity -->
            <!-- BorderBrush: Foreground highlight color -->
            <ControlTemplate x:Key="TitleBarButtonTemplate" TargetType="{x:Type Button}">
                <Grid x:Name="buttonGrid">
                    <Border x:Name="border"
                            Opacity="0"
                            SnapsToDevicePixels="True"
                            Margin="{TemplateBinding Margin}"
                            Background="{TemplateBinding Background}"
                            Tag="{TemplateBinding Tag}" />
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"
                                      RecognizesAccessKey="True" Focusable="False" />
                </Grid>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource GrayTextBrush}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsMouseOver, ElementName=buttonGrid}" Value="True">
                        <Setter Property="Foreground" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}" />
                        <Setter TargetName="border" Property="Opacity" Value="{Binding Tag, RelativeSource={RelativeSource Self}}" />
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="border" TargetProperty="Opacity">
                                    <DoubleAnimation By="0.4" Duration="0:0:0.10" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="border" TargetProperty="Opacity">
                                    <DoubleAnimation Duration="0:0:0.10" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Foreground" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}" />
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="border" TargetProperty="Opacity">
                                    <DoubleAnimation To="0.65" Duration="0:0:0.06" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="border" TargetProperty="Opacity">
                                    <DoubleAnimation Duration="0:0:0.06" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="TitleBarButtonStyle" TargetType="Button">
                <Setter Property="Template" Value="{StaticResource TitleBarButtonTemplate}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="White" /> <!-- Glyph highlight color -->
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Height" Value="28" />
                <Setter Property="Width" Value="44" />
            </Style>

            <!-- Element Style for Inactive Window-->
            <!-- Optional Tag: As double for element opacity -->
            <Style x:Key="IsActiveWindowStyle" TargetType="FrameworkElement">
                <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="Opacity" Value="1" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                        <!-- <Setter Property="Control.Foreground" Value="{DynamicResource GrayTextBrush}" /> -->
                        <Setter Property="Opacity" Value="{Binding Tag, RelativeSource={RelativeSource Self}}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- Tool Tip Style Template -->
            <!-- [Viewmodel Binding] -->
            <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
                <Setter Property="Background" Value="{DynamicResource PopupBackgroundBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PopupTextBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
                <Setter Property="Border.CornerRadius" Value="3" />
                <Setter Property="Visibility" Value="Visible" />
                <Setter Property="Placement" Value="Left" />
                <Setter Property="FontSize" Value="11.2" />
                <Setter Property="Template">  
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToolTip}">
                            <Border x:Name="border"
                                    Padding="6"
                                    BorderThickness="1.1"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    CornerRadius="{TemplateBinding Border.CornerRadius}">
                                <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Top" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding UiToolTipEnabled}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                                <Trigger Property="Placement" Value="Left">
                                    <Setter Property="HorizontalOffset" Value="-10" />
                                </Trigger>
                                <Trigger Property="Placement" Value="Right">
                                    <Setter Property="HorizontalOffset" Value="10" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Theme ToggleButton Style-->
            <Style x:Key="ThemeToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="Foreground" Value="{DynamicResource GrayTextBrush}" />
                <Setter Property="Content" Value="&#xF08C;" />
                <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
                <Setter Property="FontSize" Value="15" />
                <Setter Property="Margin" Value="0,2,6,0" />
                <Setter Property="ClickMode" Value="Press" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="border"
                                    Background="Transparent" >
                                <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource HighlightBorderBrush}" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Content" Value="&#xE706;" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.6" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Small Icon Button Style-->
            <Style x:Key="IconButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Foreground" Value="{DynamicResource GrayTextBrush}" />
                <Setter Property="FontFamily" Value="{StaticResource MaterialIcons}" />
                <Setter Property="FontSize" Value="11.2" />
                <Setter Property="Margin" Value="5,-1,5,-1" />
                <Setter Property="ClickMode" Value="Release" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border"
                                    Background="Transparent" >
                                <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource HighlightBorderBrush}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Opacity" Value="0.6"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.6" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TabItem Template -->
            <ControlTemplate x:Key="TabItemTemplate" TargetType="{x:Type TabItem}">
                <Grid>
                    <Border Name="border"
                            CornerRadius="3,3,0,0"
                            BorderThickness="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" />
                    <Border Name="overlay"
                            Opacity="0"
                            CornerRadius="3,3,0,0"
                            BorderThickness="1,1,1,0"
                            Background="{DynamicResource ButtonOverlayBrush}"
                            BorderBrush="{DynamicResource HighlightBorderBrush}" />
                    <ContentPresenter x:Name="content" ContentSource="Header"
                                      Margin="6,2,6,3"
                                      RecognizesAccessKey="True"
                                      TextOptions.TextFormattingMode="Display" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="StackPanel.ZIndex" Value="100" />
                        <Setter Property="Margin" Value="-2,-1,0,-1" />
                        <Setter TargetName="content" Property="Margin" Value="6,3,6,3" />
                        <Setter TargetName="border" Property="CornerRadius" Value="5,5,0,0" />
                        <Setter TargetName="border" Property="BorderThickness" Value="1,1,1,0" />
                        <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" />
                            <Condition Property="IsSelected" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="StackPanel.ZIndex" Value="99" />
                        <Setter TargetName="overlay" Property="BorderThickness" Value="1,1,1,0" />
                        <MultiTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                    <DoubleAnimation To="0.6" Duration="0:0:0.15" AccelerationRatio="1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </MultiTrigger.EnterActions>
                        <MultiTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                    <DoubleAnimation Duration="0:0:0.05" />
                                </Storyboard>
                            </BeginStoryboard>
                        </MultiTrigger.ExitActions>
                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="StackPanel.ZIndex" Value="-1" />
                        <Setter Property="Opacity" Value="0.5" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
                <Setter Property="Template" Value="{StaticResource TabItemTemplate}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}"/>
                <Setter Property="Background" Value="{DynamicResource SecondControlBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Margin" Value="0,2,-1,0"/>
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="Auto"/>
            </Style>


            <!-- GroupBox Style Template -->
            <Style x:Key="{x:Type GroupBox}" TargetType="{x:Type GroupBox}">
                <Setter Property="Margin" Value="3,1,3,1" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Border.CornerRadius" Value="3" />
                <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Grid SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="6" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="6" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="6" />
                                </Grid.RowDefinitions>
                                <Border Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"
                                        Opacity="0.65"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                                </Border>
                                <Border x:Name="header" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1"
                                        Padding="3,0,3,1"
                                        Background="{DynamicResource ControlBackgroundBrush}">
                                    <ContentPresenter ContentSource="Header" RecognizesAccessKey="True"
                                                      TextBlock.FontSize="11"
                                                      TextBlock.FontStyle="Italic"
                                                      TextBlock.Foreground="{DynamicResource SecondaryTextBrush}" />
                                </Border>
                                <ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

           <!-- Memory GroupBox w/ Button Style Template -->
           <!-- [Viewmodel binding] -->
            <Style x:Key="GroupBoxMemoryStyle" TargetType="{x:Type GroupBox}">
                <Setter Property="Margin" Value="3,1,3,1" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Border.CornerRadius" Value="3" />
                <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupBox}">
                            <Grid SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="6" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="6" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="6" />
                                </Grid.RowDefinitions>
                                <Border Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"
                                        Opacity="0.65"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                                </Border>
                                <Border x:Name="header" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1"
                                        Padding="3,0,3,1"
                                        Background="{DynamicResource ControlBackgroundBrush}">
                                    <StackPanel Orientation="Horizontal">
                                        <ContentPresenter ContentSource="Header" RecognizesAccessKey="True"
                                                          TextBlock.FontSize="11"
                                                          TextBlock.FontStyle="Italic"
                                                          TextBlock.Foreground="{DynamicResource SecondaryTextBrush}" />
                                        <!-- * Free System Memory Command * -->
                                        <Button Margin="3,-1,0,-1"
                                                HorizontalAlignment="Right" VerticalAlignment="Center"
                                                Content="&#xE65F;"
                                                IsTabStop="False"
                                                IsDefault="False"
                                                Style="{StaticResource IconButtonStyle}"
                                                Command="{Binding FreeSystemMemoryCommand}"
                                                IsEnabled="{Binding RamtestIsRunning, Converter={StaticResource InverseBooleanConverter}}">
                                            <FrameworkElement.ToolTip>
                                                <ToolTip>
                                                    <TextBlock>
                                                        Flush memory allocated to other processes.<LineBreak />
                                                        • Run as administrator for best results.
                                                    </TextBlock>
                                                </ToolTip>
                                            </FrameworkElement.ToolTip>
                                        </Button>
                                    </StackPanel>
                                </Border>
                                <ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <!-- ProgressBar Template -->
            <ControlTemplate x:Key="ProgressBarTemplate" TargetType="{x:Type ProgressBar}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Border Tag="background" Grid.Row="1"
                            Margin="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            Background="{TemplateBinding Background}" />
                    <Border x:Name="PART_Track" Grid.Row="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Border.OpacityMask>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Border CornerRadius="{TemplateBinding Border.CornerRadius}"
                                            Height="{Binding ActualHeight, ElementName=PART_Indicator}"
                                            Width="{Binding ActualWidth, ElementName=PART_Track}"
                                            Background="{TemplateBinding Foreground}" />
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.OpacityMask>
                        <Rectangle x:Name="PART_Indicator"
                                   Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" />
                    </Border>
                    <Border Tag="outline" Grid.Row="1"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                </Grid>
            </ControlTemplate>
            <Style TargetType="{x:Type ProgressBar}">
                <Setter Property="Template" Value="{StaticResource ProgressBarTemplate}" />
                <Setter Property="Background" Value="{DynamicResource WindowBackground}" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Border.CornerRadius" Value="4" />
                <Setter Property="BorderThickness" Value="1" />
            </Style>


            <!-- Test Status TextBlock Style -->
            <Style x:Key="TestStatusFontSyle" TargetType="{x:Type TextBlock}" >
                <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
            </Style>

            <!-- Numeric TextBox Template -->
            <!-- Optional unit symbol set by Tag property. -->
            <!-- Max TextBox characters: 10 -->
            <ControlTemplate x:Key="NumericTextBoxTemplate" TargetType="{x:Type TextBox}">
                <Grid>
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <StackPanel Orientation="Horizontal"
                                    HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalAlignment}">
                            <ScrollViewer x:Name="PART_ContentHost" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" />
                            <Label Content="{TemplateBinding Tag}"
                                   FontSize="11"
                                   Padding="1,0,2,0"
                                   FontFamily="Calibri"
                                   IsHitTestVisible="False"
                                   Background="Transparent"
                                   TextOptions.TextFormattingMode="Ideal"
                                   Foreground="{DynamicResource GrayTextBrush}"
                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </StackPanel>
                    </Border>
                    <Border x:Name="overlay" Opacity="0"
                            BorderBrush="{DynamicResource HighlightBorderBrush}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                    <DoubleAnimation To="0.5" Duration="0:0:0.08"  AccelerationRatio="1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                    <DoubleAnimation Duration="0:0:0.12" AccelerationRatio="0.2" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocused" Value="True">
                        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource HighlightBorderBrush}" />
                        <Setter TargetName="overlay" Property="Opacity" Value="1" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource GrayTextBrush}" />
                        <Setter Property="Opacity" Value="0.7" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="Template" Value="{StaticResource NumericTextBoxTemplate}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
                <Setter Property="SelectionBrush" Value="{StaticResource HighlightBrush}" />
                <Setter Property="VerticalContentAlignment" Value="Bottom" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="Border.CornerRadius" Value="3" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Width" Value="65" />
                <Setter Property="MinHeight" Value="19" />
                <Setter Property="UndoLimit" Value="10" />
                <Setter Property="MaxLength" Value="10" />
                <Setter Property="Cursor" Value="IBeam" />
            </Style>


            <!-- ComboBox: ToggleButton -->
            <Style x:Key="ComboBoxButtonStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="ClickMode" Value="Press" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid>
                                <Border CornerRadius="2"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}" />
                                <Border x:Name="overlay"
                                        Opacity="0"
                                        CornerRadius="2"
                                        Background="{DynamicResource ButtonOverlayBrush}"
                                        BorderBrush="{DynamicResource HighlightBorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}" />
                                <TextBlock Tag="arrow"
                                    Opacity="0.5"
                                    Margin="0,4,8,0"
                                    HorizontalAlignment="Right" VerticalAlignment="Center"
                                    Text="&#xE936;"
                                    FontFamily="Segoe MDL2 Assets"
                                    FontSize="8" 
                                    Foreground="{TemplateBinding Foreground}" />
                            </Grid>
                            <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                    <Condition Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource AncestorType=ComboBox}}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                                <DoubleAnimation To="0.6" Duration="0:0:0.10" AccelerationRatio="1" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiDataTrigger.EnterActions>
                                    <MultiDataTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                                <DoubleAnimation Duration="0:0:0.10" AccelerationRatio="1" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiDataTrigger.ExitActions>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                        <Condition Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource AncestorType=ComboBox}}" Value="True" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="overlay" Property="BorderBrush" Value="Transparent" />
                                    <Setter TargetName="overlay" Property="Opacity" Value="0.6" />
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- ComboBox: ComboBoxItem -->
            <!-- TODO: erratic behavior holding mousedown with cursor outside popup window -->
            <ControlTemplate x:Key="ComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
                <Grid>
                    <Border x:Name="overlay" Opacity="0.7"
                            CornerRadius="2"
                            Background="{TemplateBinding Background}" />
                    <Border x:Name="border" Opacity="0.7"
                            CornerRadius="2"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                    <ContentPresenter x:Name="content" Margin="4,3,4,3" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="overlay" Property="Background" Value="{DynamicResource ButtonOverlayBrush}" />
                        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource HighlightBorderBrush}" />
                    </Trigger>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="FontStyle" Value="Italic" />
                        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
                    </Trigger>
                    <MultiTrigger><!-- Mouse over when keyboard focus on different item -->
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" />
                            <Condition Property="IsKeyboardFocused" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource ButtonOverlayBrush}" />
                        <Setter TargetName="overlay" Property="Background" Value="{DynamicResource ButtonOverlayBrush}" />
                        <Setter TargetName="overlay" Property="Opacity" Value="0.4" />
                        <Setter TargetName="border" Property="Opacity" Value="0" />
                        <Setter TargetName="border" Property="BorderThickness" Value="1" />
                        <Setter TargetName="border" Property="CornerRadius" Value="0" />
                    </MultiTrigger>
                    <MultiTrigger><!-- Keyboard focus navigation -->
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="False" />
                            <Condition Property="IsKeyboardFocused" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="overlay" Property="Background" Value="{DynamicResource ButtonOverlayBrush}" />
                        <Setter TargetName="overlay" Property="Opacity" Value="0.25" />
                        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource HighlightBorderBrush}" />
                        <Setter TargetName="border" Property="BorderThickness" Value="1.2" />
                    </MultiTrigger>
                    <MultiTrigger><!-- Keyboard focus on selected item-->
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True" />
                            <Condition Property="IsKeyboardFocused" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="border" Property="BorderThickness" Value="1" />
                        <Setter TargetName="border" Property="Opacity" Value="0.3" />
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Template" Value="{StaticResource ComboBoxItemTemplate}" />
            </Style>

            <!-- * ComboBox Drop Down Template * -->
            <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
                <Grid>
                    <ToggleButton x:Name="comboBoxButton" Grid.ColumnSpan="2"
                        Style="{StaticResource ComboBoxButtonStyle}"
                        IsTabStop="False" Focusable="False"
                        ClickMode="Press"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    <ContentPresenter
                        IsHitTestVisible="False"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Margin="{TemplateBinding Padding}"
                        Content="{TemplateBinding SelectionBoxItem}"/>
                    <Popup Name="Popup"
                           IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                           Focusable="False"
                           Placement="Bottom"
                           PopupAnimation="Slide"
                           AllowsTransparency="True">
                        <Border Name="dropDown"
                                CornerRadius="0,0,3,3"
                                BorderThickness="1,0,1,1"
                                SnapsToDevicePixels="True"
                                Background="{DynamicResource PopupBackgroundBrush}"
                                BorderBrush="{DynamicResource ControlBorderBrush}"
                                MinWidth="{TemplateBinding ActualWidth}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <ScrollViewer SnapsToDevicePixels="True">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.55" />
                </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="ComboBoxDropDown" TargetType="{x:Type ComboBox}">
                <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
                <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
                <Setter Property="Background" Value="{DynamicResource SecondControlBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="Padding" Value="6,2,21,2" />
                <Setter Property="MinWidth" Value="105" />
            </Style>


            <!-- CheckBox Template -->
            <ControlTemplate x:Key="CustomCheckBoxTemplate" TargetType="{x:Type CheckBox}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Border x:Name="border" Grid.Column="0"
                            Width="13" Height="13"
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Border x:Name="checkSymbol"
                                Width="9" Height="9"
                                Visibility="Collapsed"
                                SnapsToDevicePixels="True"
                                CornerRadius="5"
                                Background="{DynamicResource SecondaryTextBrush}" />
                    </Border>
                    <Border x:Name="overlay" Grid.Column="0"
                            Opacity="0"
                            SnapsToDevicePixels="True"
                            Width="{Binding Width, ElementName=border}"
                            Height="{Binding Height, ElementName=border}"
                            Background="{DynamicResource HighlightItemBrush}"
                            BorderBrush="{DynamicResource HighlightBorderBrush}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                    <ContentPresenter
                        Grid.Column="1" Margin="5,0,0,0"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay">
                                    <DoubleAnimation Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"
                                                     To="0.6" Duration="0:0:0.10" AccelerationRatio="1" />
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                     To="1" Duration="0:0:0.10" AccelerationRatio="0.1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay">
                                    <DoubleAnimation Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)"
                                                     Duration="0:0:0.10" AccelerationRatio="0.5" />
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                     Duration="0:0:0.10" AccelerationRatio="0.5" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="checkSymbol" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.7" />
                    </Trigger>
                    <!-- Todo: focus bug -->
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsFocused" Value="True" />
                            <Condition Property="IsKeyboardFocused" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
                <Setter Property="Template" Value="{StaticResource CustomCheckBoxTemplate}" />
                <Setter Property="Background" Value="{DynamicResource WindowBackground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Border.CornerRadius" Value="6" />
            </Style>


            <!-- Expander: ToggleButton Style -->
            <Style x:Key="ExpanderHeaderStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Padding="{TemplateBinding Padding}">
                                <Grid SnapsToDevicePixels="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="13"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid>
                                        <Grid.LayoutTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <RotateTransform Angle="{Binding Tag, RelativeSource={RelativeSource AncestorType=Expander}}"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Grid.LayoutTransform>
                                        <Ellipse x:Name="circle" HorizontalAlignment="Center" VerticalAlignment="Center"
                                            SnapsToDevicePixels="True"
                                            Width="13" Height="13"
                                            Stroke="{DynamicResource ControlBorderBrush}"
                                            Fill="{DynamicResource TitleBarBackground}" />
                                        <TextBlock x:Name="arrow"
                                            HorizontalAlignment="Center" VerticalAlignment="Center"
                                            Text="&#xE5DF;"
                                            FontFamily="{StaticResource MaterialIcons}"
                                            FontSize="17"
                                            Padding="-1"
                                            Foreground="{TemplateBinding Foreground}" />
                                    </Grid>
                                    <ContentPresenter Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Text" TargetName="arrow" Value="&#xE5DE;"/>
                                    <Setter Property="Foreground" TargetName="arrow" Value="{DynamicResource GrayTextBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Opacity" TargetName="arrow" Value="0.6"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" TargetName="arrow" Value="{DynamicResource HighlightBorderBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Expander: Focus Style -->
            <Style x:Key="ExpanderHeaderFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Grid SnapsToDevicePixels="True">
                                <Ellipse Height="13" Width="13" Opacity="1" Stroke="LightGray" StrokeThickness="1" StrokeDashArray="1,2"/>
                                <Ellipse Height="13" Width="13" Opacity="0.2" Fill="Gray" StrokeThickness="0"/>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Expander Template -->
            <!-- Button rotation defined via tag property as Double -->
            <!-- ExpandDirection Values: Right=0.0, Left=180.0, Up=-90.0, Down=90.0 -->
            <ControlTemplate x:Key="ExpanderTemplate" TargetType="{x:Type Expander}">
                <Border SnapsToDevicePixels="True"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                    <DockPanel>
                        <ToggleButton x:Name="HeaderSite" DockPanel.Dock="Top"
                            MinWidth="0" MinHeight="0" IsTabStop="True"
                            Style="{StaticResource ExpanderHeaderStyle}"
                            FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                            IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Content="{TemplateBinding Header}"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Foreground="{TemplateBinding Foreground}"
                            Focusable="{TemplateBinding Focusable}"
                            Padding="{TemplateBinding Padding}" />
                        <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            Visibility="Collapsed" />
                    </DockPanel>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="True">
                        <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                    </Trigger>
                    <Trigger Property="ExpandDirection" Value="Right">
                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                    </Trigger>
                    <Trigger Property="ExpandDirection" Value="Left">
                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
                    </Trigger>
                    <Trigger Property="ExpandDirection" Value="Up">
                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                    </Trigger>
                    <Trigger Property="ExpandDirection" Value="Down">
                        <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Bottom" />
                        <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="ExpanderButtonStyle" TargetType="{x:Type Expander}">
                <Setter Property="Template" Value="{StaticResource ExpanderTemplate}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Cursor" Value="Hand" />
            </Style>


            <!-- Main Button Template -->
            <ControlTemplate x:Key="MainButtonTemplate" TargetType="{x:Type Button}">
                <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        BorderThickness="{TemplateBinding Border.BorderThickness}">
                    <Grid>
                        <Border x:Name="overlay"
                                Opacity="0" Margin="-1"
                                Background="{DynamicResource ButtonOverlayBrush}"
                                BorderBrush="{DynamicResource HighlightBorderBrush}"
                                CornerRadius="{TemplateBinding Border.CornerRadius}"
                                BorderThickness="{TemplateBinding Border.BorderThickness}" />
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="Tag" Value="highlight">
                        <Setter TargetName="overlay" Property="Opacity" Value="0.3"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                    <DoubleAnimation To="0.60" Duration="0:0:0.10" AccelerationRatio="0.6" DecelerationRatio="0.4" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                    <DoubleAnimation BeginTime="0:0:0.10" Duration="0:0:0.15" DecelerationRatio="1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                    <DoubleAnimation To="1" Duration="0:0:0.03" AccelerationRatio="1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="overlay" TargetProperty="Opacity">
                                    <DoubleAnimation Duration="0:0:0.05" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource GrayTextBrush}" />
                        <Setter Property="Opacity" Value="0.75"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="MainButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Template" Value="{StaticResource MainButtonTemplate}" />
                <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
                <Setter Property="Background" Value="{DynamicResource SecondControlBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
                <Setter Property="Border.CornerRadius" Value="3" />
                <Setter Property="Padding" Value="7,2,7,2" />
                <Setter Property="Cursor" Value="Hand" />
            </Style>


            <!-- ScrollBar: RepeatButton -->
            <!--    Hides repeat buttons around scroll bar thumb -->
            <Style x:Key="ScrollBarButtonStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="Template" Value="{StaticResource RepeatButtonTemplate}" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="False" />
                <Setter Property="Visibility" Value="Visible" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Background="Transparent"
                                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- ScrollBar: Thumb -->
            <ControlTemplate x:Key="ThumbTemplate" TargetType="{x:Type Thumb}">
                <Border x:Name="border"
                        CornerRadius="4"
                        BorderThickness="0"
                        Background="{TemplateBinding Background}"
                        Width="{TemplateBinding Width}" />
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="border">
                                    <DoubleAnimation To="1" Duration="0:0:0.15" AccelerationRatio="1"
                                                     Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)" />
                                    <ColorAnimation To="#468069" Duration="0:0:0.15" AccelerationRatio="1"
                                                    Storyboard.TargetProperty="Background.(SolidColorBrush.Color)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard TargetName="border">
                                    <DoubleAnimation BeginTime="0:0:0.10" Duration="0:0:0.3" AccelerationRatio="0.1"
                                                     Storyboard.TargetProperty="Background.(SolidColorBrush.Opacity)" />
                                    <ColorAnimation BeginTime="0:0:0.10" Duration="0:0:0.3" AccelerationRatio="0.1"
                                                    Storyboard.TargetProperty="Background.(SolidColorBrush.Color)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
                <Setter Property="Template" Value="{StaticResource ThumbTemplate}" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="False" />
                <Setter Property="Focusable" Value="False" />
            </Style>

            <!-- ScrollViewer: ScrollBar Vertical Template -->
           <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
                <Grid>
                    <Border Background="{DynamicResource ScrollBarTrackBrush}"/>
                    <Track Name="PART_Track" IsDirectionReversed="True">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarButtonStyle}" Command="ScrollBar.PageUpCommand" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb x:Name="scrollThumb" Width="8"
                                   Style="{StaticResource ScrollBarThumbStyle}"
                                   Background="{StaticResource ScrollBarThumbBrush}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{StaticResource ScrollBarButtonStyle}" Command="ScrollBar.PageDownCommand" />
                        </Track.IncreaseRepeatButton>
                    </Track>
                </Grid>
            </ControlTemplate>
            <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Focusable" Value="True" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- * ScrollViewer Base Template * -->
            <ControlTemplate x:Key="ScrollViewerTemplate" TargetType="{x:Type ScrollViewer}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <ScrollContentPresenter Grid.Column="0" />
                    <ScrollBar x:Name="PART_VerticalScrollBar"
                        Grid.Column="1" Grid.Row="0"
                        Style="{StaticResource ScrollBarStyle}"
                        KeyboardNavigation.DirectionalNavigation="Contained"
                        Value="{TemplateBinding VerticalOffset}"
                        Maximum="{TemplateBinding ScrollableHeight}"
                        ViewportSize="{TemplateBinding ViewportHeight}"
                        Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                </Grid>
            </ControlTemplate>
            <Style x:Key="VerticalScrollStyle" TargetType="{x:Type ScrollViewer}">
                <Setter Property="Template" Value="{StaticResource ScrollViewerTemplate}" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="PanningMode" Value="VerticalOnly" />
                <Setter Property="CanContentScroll" Value="True" />
                <Setter Property="Focusable" Value="True" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            </Style>

        </ResourceDictionary>
     </Application.Resources>
</Application>